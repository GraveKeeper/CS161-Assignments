Sean Harrington
CS161

Chapter 6
Please do the following lab exercises. (points for each question with
brackets). Name your file lab6.txt.

1. Consider the following function prototypes: (30)
int func1(int, double);
double func2(string, int, double);
char func3(int, int, double, char);
string join (string, string);
Answer the following questions:
a. How many parameters does the function func1 have? What is the type of the function
func1?
2 int
b. How many parameters does function func2 have? What is the type of function func2?
3 double
c. How many parameters does function func3 have? What is the type of function func3?
1
d. How many parameters does function join have? What is the type of function join?
2
e. How many actual parameters are needed to call the function func1? What is the type of each
actual parameter, and in what order should you use these parameters in a call to the function
func1?
1 
f. Write a C++ statement that prints the value returned by the function func1 with the actual
parameters 3 and 8.5.
cout << func1(3,8.5);
g. Write a C++ statement that prints the value returned by function join with the actual
parameters "John" and "Project Manager", respectively.
h. Write a C++ statement that prints the next character returned by function func3. (Use your
own actual parameters.)
cout << join("john","Project manager");
2. Write the definition of a function that takes as input the three numbers. The function returns true
if the first number to the power of the second number equals the third number; otherwise, it
returns false. (Assume that the three numbers are of type double.) (10)

bool fun9 (double value1, double value2, double value3)
{
	if pow(value1, value2) == value3)
		return true;
	return false;
}
3. Consider the following C++ function: (10)
int mystery(int num)
{
int y = 1;
if (num == 0)
return 1;
else if (num < 0)
return -1;
else
for(int count = 1; count < num; count++)
y = y * (num - count);
return y;
}
What is the output of the following statements?
a. cout << mystery(6) << endl;
120
b. cout << mystery(0) << endl;
1
c. cout << mystery(-5) << endl;
-1
d. cout << mystery(10) << endl;

4. Write the definition of a void function that takes as input two parameters of type int, say
sum and testScore. The function updates the value of sum by adding the value of
testScore. The new value of sum is reflected in the calling environment. (10)
void popsicle (int &sum,int testscore )
{
sum=sum+testscore;
}
5. Consider the following program: (20)
#include<iostream>
#include<cmath>
#include<iomanip>
using namespace std;
void traceMe(double &x, double &y);
int main()
{
double x,y;
double one, two;
cout << "Enter two numbers: ";
cin >> one >> two;
cout << endl;
traceMe(one, two);
cout << x " " y;
traceMe(two, one);
cout << x " " y;
return 0;
}
void traceMe(double &x, double &y)
{
double z;
if (x != 0)
z = sqrt(y) / x;
else
{
cout << "Enter a nonzero number: ";
cin >> x;
cout << endl;
z = floor(pow(y, x));
}
cout << fixed << showpoint << setprecision(2);
cout << x << ", " << y << ", " << z << endl;
}
The function traceMe in this program outputs the values of x, y, and z. Modify the definition of
this function so that rather than print these values, it sends the values back to the calling environment
and the calling environment prints these values.

put an & in frot of the referance variables

6. What is the output of the following code fragment? (Note: alpha and beta are int
variables.) (10)
alpha = 5;
beta = 10;
if(beta >= 10)
{
int alpha = 10;
beta = beta + alpha;
cout << alpha << ' ' << beta << endl;
}
cout << alpha << ' ' << beta << endl;

10 10
10 10

7. Consider the following function definition: (10)
void defaultParam(int num1, int num2 = 7, double z =
2.5)
{
int num3;
num1 = num1 + static_cast<int>(z);
z = num2 + num1 * z;
num3 = num2 - num1;
cout << "num3 = " << num3 << endl;
}
What is the output of the following function calls?
a.defaultParam(7);
b. defaultParam(8, 2);
c. defaultParam(0, 1, 7.5);
d. defaultParam(1, 2, 3.0);